  <!--?xml version="1.0" encoding="UTF-8"? -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Student 테이블을 위한 query mapper -->
<mapper namespace="student">

	<!-- ====================================================================================================================== -->
	<!-- ========================================  READ   QUERY   ============================================================= -->
	<!-- ====================================================================================================================== -->
	

	<!-- 모든 학생을 다 불러오기 -->
	<select id="listAllStudent" resultType="HashMap">
		SELECT STU_NUMBER,STU_NAME,STU_BIRTHDAY,STU_PHONE,STU_EMAIL,STU_PASSWORD,STU_ENTERANCE,STU_AUTHORITY,STU_GENDER
        ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuEnterance' AND COMMON_CODE = S.STU_ENTERANCE) as STU_ENTERANCE_VALUE
        ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuAuthority' AND COMMON_CODE = S.STU_AUTHORITY) as STU_AUTHORITY_VALUE
        ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuGender' AND COMMON_CODE = S.STU_GENDER) as STU_GENDER_VALUE
    	FROM STUDENT S
    	WHERE S.STU_DELETE_YN = 'N'
	</select>
	
	
	<!-- 특정 키워드 검색에 따른 학생 불러오기 -->
	<select id="searchKeywordStudent" resultType="HashMap" parameterType="HashMap">
		 SELECT S.STU_NUMBER,S.STU_NAME,S.STU_BIRTHDAY,S.STU_PHONE,S.STU_EMAIL,S.STU_PASSWORD,S.STU_ENTERANCE,S.STU_GENDER,S.STU_AUTHORITY,F.FEE_PAID_DATE, F.FEE_TOTAL_AMOUNT, F.FEE_PAID_AMOUNT, F.FEE_PAID_METHOD, F.FEE_PAID_STATUS
	     ,DECODE(F.FEE_CONTENT,NULL,'없음',F.FEE_CONTENT) as FEE_CONTENT_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidMethod' AND COMMON_CODE = F.FEE_PAID_METHOD) as FEE_PAID_METHOD_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidStatus' AND COMMON_CODE = F.FEE_PAID_STATUS) as FEE_PAID_STATUS_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuEnterance' AND COMMON_CODE = S.STU_ENTERANCE) as STU_ENTERANCE_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuGender' AND COMMON_CODE = S.STU_GENDER) as STU_GENDER_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuAuthority' AND COMMON_CODE = S.STU_AUTHORITY) as STU_AUTHORITY_VALUE
	     FROM STUDENT S, STUDENT_FEE F
	     WHERE (S.STU_NUMBER = F.STU_NUMBER)
	     AND S.STU_DELETE_YN = 'N'

	    <choose>
			<when test="searchCategory == 'STU_NAME'">
				AND S.STU_NAME = #{searchContent}	
			</when>
			<when test="searchCategory == 'STU_NUMBER'">
				AND S.STU_NUMBER = #{searchContent}	
			</when>
			<when test="searchCategory == 'STU_PHONE'">
				AND S.STU_PHONE = #{searchContent}	
			</when>
			<when test="searchCategory == 'STU_EMAIL'">
				AND S.STU_EMAIL = #{searchContent}	
			</when>
	    </choose>
	   
	</select>
	
	<!-- 검색 범위에 따른 학생 불러오기 -->
	<select id="searchScopeStudent" resultType="HashMap" parameterType="HashMap">
		 SELECT S.STU_NUMBER,S.STU_NAME,S.STU_BIRTHDAY,S.STU_PHONE,S.STU_EMAIL,S.STU_PASSWORD,S.STU_ENTERANCE,S.STU_GENDER,S.STU_AUTHORITY,F.FEE_PAID_DATE, F.FEE_TOTAL_AMOUNT, F.FEE_PAID_AMOUNT, F.FEE_PAID_METHOD, F.FEE_PAID_STATUS
	     ,DECODE(F.FEE_CONTENT,NULL,'없음',F.FEE_CONTENT) as FEE_CONTENT_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidMethod' AND COMMON_CODE = F.FEE_PAID_METHOD) as FEE_PAID_METHOD_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidStatus' AND COMMON_CODE = F.FEE_PAID_STATUS) as FEE_PAID_STATUS_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuEnterance' AND COMMON_CODE = S.STU_ENTERANCE) as STU_ENTERANCE_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuGender' AND COMMON_CODE = S.STU_GENDER) as STU_GENDER_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuAuthority' AND COMMON_CODE = S.STU_AUTHORITY) as STU_AUTHORITY_VALUE
	     FROM STUDENT S, STUDENT_FEE F
	     WHERE (S.STU_NUMBER = F.STU_NUMBER)
	     AND S.STU_DELETE_YN = 'N'
	     
			<if test="stuNumber != 'null'">
				AND S.STU_NUMBER LIKE #{stuNumber}
			</if>
			<if test="stuGender != 'null'">
				AND S.STU_GENDER = #{stuGender}	
			</if>
			<if test="stuEnterance != 'null'">
				AND S.STU_ENTERANCE = #{stuEnterance}	
			</if>
			<if test="stuAuthority != 'null'">
				AND S.STU_AUTHORITY = #{stuAuthority}	
			</if>
	   
	</select>
	
	
	
	<!-- 한 학생 개인 정보 불러오기 : 
			특정 학생의 기본정보와 학생회비 정보는 반드시 존재하지만, 이력의 경우에는 존재하지 않을수도 있음. 따라서, 이력 테이블은 따로 호출할 수 있게 한다.
	-->
	<!-- 학생 기본정보 가져오기 : getStudentBasic -->
	<select id="getStudentBasic" resultType="HashMap" parameterType="HashMap">
		 SELECT S.STU_NUMBER,S.STU_NAME,S.STU_BIRTHDAY,S.STU_PHONE,S.STU_EMAIL,S.STU_PASSWORD,S.STU_ENTERANCE,S.STU_GENDER,S.STU_AUTHORITY,F.FEE_PAID_DATE, F.FEE_TOTAL_AMOUNT, F.FEE_PAID_AMOUNT, F.FEE_PAID_METHOD, F.FEE_PAID_STATUS
	     ,DECODE(F.FEE_CONTENT,NULL,'없음',F.FEE_CONTENT) as FEE_CONTENT_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidMethod' AND COMMON_CODE = F.FEE_PAID_METHOD) as FEE_PAID_METHOD_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'feePaidStatus' AND COMMON_CODE = F.FEE_PAID_STATUS) as FEE_PAID_STATUS_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuEnterance' AND COMMON_CODE = S.STU_ENTERANCE) as STU_ENTERANCE_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuGender' AND COMMON_CODE = S.STU_GENDER) as STU_GENDER_VALUE
	     ,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'stuAuthority' AND COMMON_CODE = S.STU_AUTHORITY) as STU_AUTHORITY_VALUE
	     FROM STUDENT S, STUDENT_FEE F
	     WHERE (S.STU_NUMBER = F.STU_NUMBER)
	     AND S.STU_DELETE_YN = 'N'
	     AND S.STU_NUMBER = #{stuNumber}
	</select>
	
	<!-- 학생 이력 갯수 가지고 오기 : getStudentExpCount
		학생 이력의 갯수가 0이 아니면 학생 이력 정보를 가지고 온다.
	-->
	<select id="getStudentExpCount" resultType="HashMap" parameterType="HashMap">
		SELECT  COUNT(E.EXP_CONTENT) as exp_cnt
   		FROM EXPERIENCE E
        WHERE 
            E.STU_NUMBER = #{stuNumber}
	</select>
	
	
	<!-- 학생 이력정보 가져오기 : getStudentExp -->
	<select id="getStudentExp" resultType="HashMap" parameterType="HashMap">
		 SELECT 
		 	E.EXP_YEAR
		 	,E.EXP_SEMESTER
		 	,E.EXP_CONTENT
   			,(SELECT COMMON_VALUE FROM COMMON WHERE COMMON_CATEGORY = 'expSemester' AND COMMON_CODE = E.EXP_SEMESTER) as EXP_SEMESTER_VALUE
	     FROM STUDENT S, EXPERIENCE E
	     WHERE 
	     	 S.STU_NUMBER = E.STU_NUMBER
	     AND S.STU_DELETE_YN = 'N'
	     AND S.STU_NUMBER = #{stuNumber}
	     ORDER BY E.EXP_YEAR,E.EXP_SEMESTER ASC
	</select>
	
	
	
	<!-- 학번 유효성 체크하기  : checkStuNumber -->
	<select id="checkStuNumber" resultType="HashMap" parameterType="HashMap">
		 SELECT STU_NUMBER, STU_NAME
	     FROM STUDENT
	     WHERE 
	     	 STU_NUMBER = #{stuNumber}
	</select>
	
	
	<!-- ====================================================================================================================== -->
	<!-- ========================================  INSERT   QUERY   =========================================================== -->
	<!-- ====================================================================================================================== -->
	
	<!-- 학생 '경력' 추가하기 -->
	<insert id="insertExperience" parameterType="HashMap">
		INSERT 
    		INTO EXPERIENCE(
           		STU_NUMBER
            	,EXP_YEAR
            	,EXP_SEMESTER
            	,EXP_CONTENT
    		) 
    		VALUES (
        		#{stuNumber}
        		,#{expYear}
        		,#{expSemester}
        		,#{expContent}
    		)
	</insert>
	
	<!-- 학생 '기본정보'추가하기 -->
	<insert id="insertStudentInfo" parameterType="HashMap" >
		INSERT 
    		INTO STUDENT(
           		STU_NUMBER
            	,STU_NAME
            	,STU_BIRTHDAY
            	,STU_PHONE
            	,STU_EMAIL
            	,STU_ENTERANCE
            	,STU_AUTHORITY
            	,STU_GENDER
            	,STU_PASSWORD
    		) 
    		VALUES (
        		#{stuNumber}
        		,#{stuName}
        		,#{stuBirthday}
        		,#{stuPhone}
        		,#{stuEmail}
        		,#{stuEnterance}
        		,#{stuAuthority}
        		,#{stuGender}
        		,#{stuPassword}
    		)
	</insert>
	
	
	<!-- '학생회비' 추가하기 -->
	<insert id="insertStudentFee" parameterType="HashMap" >
	INSERT 
    		INTO STUDENT_FEE(
           		STU_NUMBER
            	,FEE_TOTAL_AMOUNT
            	,FEE_PAID_METHOD
            	,FEE_PAID_STATUS
            
            	<if test='feePaidDate != null and feePaidDate !="" '>
				,FEE_PAID_DATE
				</if>
				<if test='feePaidAmount != null and feePaidAmount !="" '>
				,FEE_PAID_AMOUNT
				</if>
        		<if test='feeContent != null and feeContent !="" '>
				,FEE_CONTENT
				</if>
    		) 
    		VALUES (
        		#{stuNumber}
        		,#{feeTotalAmount}
        		,#{feePaidMethod}
        		,#{feePaidStatus}
        		
        		<if test='feePaidDate != null and feePaidDate !="" '>
				,#{feePaidDate}
				</if>
				<if test='feePaidAmount != null and feePaidAmount !="" '>
				,#{feePaidAmount}
				</if>
        		<if test='feeContent != null and feeContent !="" '>
				,#{feeContent}
				</if>
    		)
	</insert>
	
	<!-- '삭제 이유' 추가하기 -->
	<insert id="insertDeleteLog" parameterType="HashMap" >
		INSERT 
    		INTO LOG_DELETE(
           		STU_NUMBER
            	,LOG_RESON
    		) 
    		VALUES (
        		#{stuNumber}
        		,#{logReason}
    		)
	</insert>
	
	<!-- ====================================================================================================================== -->
	<!-- ========================================  UPDATE QUERY   ============================================================= -->
	<!-- ====================================================================================================================== -->
	<update id="updateStudent" parameterType="HashMap" >
		
		 UPDATE STUDENT
		     SET 
		        STU_NAME 		= #{stuName} 
		        ,STU_BIRTHDAY 	= #{stuBirthday} 
		        ,STU_PHONE 		= #{stuPhone}
		        ,STU_EMAIL 		= #{stuEmail}
		        ,STU_GENDER 	= #{stuGender}
		        ,STU_AUTHORITY 	= #{stuAuthority}
	            ,STU_ENTERANCE 	= #{stuEnterance}
		    WHERE
		        STU_NUMBER = #{stuNumber}
	</update>
	<!-- ====================================================================================================================== -->
	<!-- ======================================== DELETE  QUERY   ============================================================= -->
	<!-- ====================================================================================================================== -->
	<update id="deleteStudent" parameterType="HashMap" >
		
	 UPDATE STUDENT
	     SET 
	        STU_DELETE_YN = Y
	    WHERE
	        STU_NUMBER = #{stuNumber}
    	
	</update>
	
	        
	
	
</mapper>